/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,26],$V2=[1,28],$V3=[1,9],$V4=[1,13],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,37],$V9=[1,36],$Va=[1,35],$Vb=[1,33],$Vc=[1,34],$Vd=[1,32],$Ve=[1,30],$Vf=[1,31],$Vg=[1,29],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[13,15,23,36,39,41,42,43,44,46,51,55,57,58,59,65,66,67,68,69,70],$Vo=[1,54],$Vp=[6,13,15,23,36,39,41,42,43,44,46,51,55,57,58,59,65,66,67,68,69,70],$Vq=[13,14,15,18,23,36,39,41,42,43,44,46,51,55,57,58,59,65,66,67,68,69,70],$Vr=[1,57],$Vs=[1,72],$Vt=[1,73],$Vu=[1,81],$Vv=[1,79],$Vw=[1,76],$Vx=[1,80],$Vy=[1,75],$Vz=[1,77],$VA=[1,78],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,99],$VG=[6,11,13,14,15,18,23,36,39,41,42,43,44,46,49,51,55,57,58,59,65,66,67,68,69,70],$VH=[1,109],$VI=[1,108],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[1,122],$VW=[1,123],$VX=[11,38,49,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VY=[1,146],$VZ=[38,60],$V_=[11,38,49,60,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86],$V$=[11,38,49,60,84,85],$V01=[48,60],$V11=[11,38,49,60,71,72,77,78,79,80,81,82,83,84,85,86],$V21=[11,38,49,60,77,78,79,80,81,82,83,84,85,86],$V31=[11,38,49,60,81,82,83,84,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"ENCABEZADO":4,"INSTRUCCIONES":5,"EOF":6,"IMPORTACIONES":7,"INCERTEZA":8,"IMPORTAR":9,"SALTOS":10,"salto_linea":11,"TABS":12,"tab":13,"importar":14,"id":15,"punto":16,"crl":17,"incerteza":18,"decimal":19,"INSTRUCCION":20,"DECLARACIONES":21,"ASIGNACION":22,"DECLARACION_FUNCION":23,"LLAMADA_FUNCION":24,"RETORNO":25,"INSTRUCCION_SI":26,"INSTRUCCION_SINO":27,"MOSTRAR":28,"PARA":29,"MIENTRAS":30,"DETENER":31,"CONTINUAR":32,"DIBUJAR_AST":33,"DIBUJAR_EXP":34,"DIBUJAR_TS":35,"dib_ast":36,"par_a":37,"par_c":38,"dib_exp":39,"EXP":40,"dib_ts":41,"continuar":42,"detener":43,"mientras":44,"dos_p":45,"para":46,"TIPO_VARIABLE_NATIVA":47,"asig":48,"pyc":49,"OP":50,"for":51,"ASIGNACION_FOR":52,"inc":53,"dec":54,"mostrar":55,"LISTA_EXPRESIONES":56,"si":57,"sino":58,"retorno":59,"coma":60,"IDS":61,"LISTA_PARAMETROS":62,"PARAMETRO":63,"TIPO_IGUAL":64,"double":65,"boolean":66,"string":67,"int":68,"char":69,"void":70,"menos":71,"mas":72,"por":73,"div":74,"mod":75,"pot":76,"mayor":77,"menor":78,"mayor_igual":79,"menor_igual":80,"igual":81,"dif":82,"sig_inc":83,"and":84,"or":85,"xor":86,"not":87,"entero":88,"true":89,"false":90,"cadena":91,"char_exp":92,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",11:"salto_linea",13:"tab",14:"importar",15:"id",16:"punto",17:"crl",18:"incerteza",19:"decimal",23:"DECLARACION_FUNCION",36:"dib_ast",37:"par_a",38:"par_c",39:"dib_exp",41:"dib_ts",42:"continuar",43:"detener",44:"mientras",45:"dos_p",46:"para",48:"asig",49:"pyc",51:"for",52:"ASIGNACION_FOR",53:"inc",54:"dec",55:"mostrar",57:"si",58:"sino",59:"retorno",60:"coma",65:"double",66:"boolean",67:"string",68:"int",69:"char",70:"void",71:"menos",72:"mas",73:"por",74:"div",75:"mod",76:"pot",77:"mayor",78:"menor",79:"mayor_igual",80:"menor_igual",81:"igual",82:"dif",83:"sig_inc",84:"and",85:"or",86:"xor",87:"not",88:"entero",89:"true",90:"false",91:"cadena",92:"char_exp"},
productions_: [0,[3,3],[3,2],[4,2],[4,1],[4,1],[7,2],[7,1],[10,2],[10,1],[12,2],[12,1],[9,5],[8,3],[5,3],[5,2],[5,2],[5,1],[20,2],[20,1],[20,1],[20,2],[20,2],[20,2],[20,2],[20,1],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[33,4],[34,4],[35,3],[32,1],[31,1],[30,5],[29,12],[29,9],[50,1],[50,1],[28,5],[26,5],[27,2],[25,2],[25,1],[21,2],[21,6],[21,4],[21,5],[21,6],[62,3],[62,1],[63,2],[22,4],[64,1],[61,3],[61,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[24,3],[24,4],[56,3],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 66:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo(new NodoAST("-","negativo")); this.$.agregarHijo($$[$0]);
break;
case 67:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("+","suma")); this.$.agregarHijo($$[$0]);
break;
case 68:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("-","resta")); this.$.agregarHijo($$[$0]);
break;
case 69:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("*","producto")); this.$.agregarHijo($$[$0]);
break;
case 70:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("/","division")); this.$.agregarHijo($$[$0]);
break;
case 71:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("%","mod")); this.$.agregarHijo($$[$0]);
break;
case 72:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("^","potencia")); this.$.agregarHijo($$[$0]);
break;
case 73:
this.$ = new NodoAST("EXP", ""); this.$.agregarHijo($$[$0-1]);
break;
case 74:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST(">","mayor")); this.$.agregarHijo($$[$0]);
break;
case 75:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("<","menor")); this.$.agregarHijo($$[$0]);
break;
case 76:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST(">=","mayor_igual")); this.$.agregarHijo($$[$0]);
break;
case 77:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("<=","menor_igual")); this.$.agregarHijo($$[$0]);
break;
case 78:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("==","igual")); this.$.agregarHijo($$[$0]);
break;
case 79:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("!=","dif")); this.$.agregarHijo($$[$0]);
break;
case 80:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("~","sig_inc")); this.$.agregarHijo($$[$0]);
break;
case 81:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("&&","and")); this.$.agregarHijo($$[$0]);
break;
case 82:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("||","or")); this.$.agregarHijo($$[$0]);
break;
case 83:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new NodoAST("|&","xor")); this.$.agregarHijo($$[$0]);
break;
case 84:
this.$ = new NodoAST("EXP",""); this.$.agregarHijo(new NodoAST("!","not")); this.$.agregarHijo($$[$0]);
break;
case 85:
this.$ = new NodoAST($$[$0], "ENTERO");
break;
case 86:
this.$ = new NodoAST($$[$0], "DECIMAL");
break;
case 87:
this.$ = new NodoAST($$[$0], "STRING");
break;
case 88:
this.$ = new NodoAST($$[$0], "ID");
break;
case 89:
this.$ = new NodoAST($$[$0], "TRUE");
break;
case 90:
this.$ = new NodoAST($$[$0], "FALSE");
break;
case 91:
this.$ = new NodoAST($$[$0], "CADENA");
break;
case 92:
this.$ = new NodoAST($$[$0], "CHAR");
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:5,9:8,12:6,13:$V0,14:$V1,15:$V2,18:$V3,20:7,21:11,22:12,23:$V4,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:$V5,39:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:$Vb,47:27,51:$Vc,55:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{1:[3]},{5:47,12:6,13:$V0,15:$V2,20:7,21:11,22:12,23:$V4,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:$V5,39:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:$Vb,47:27,51:$Vc,55:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{6:[1,48],12:49,13:$V0,15:$V2,20:50,21:11,22:12,23:$V4,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:$V5,39:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:$Vb,47:27,51:$Vc,55:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Vn,[2,4],{8:51,9:52,14:$V1,18:$V3}),o($Vn,[2,5]),{13:$Vo,15:$V2,20:53,21:11,22:12,23:$V4,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:$V5,39:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:$Vb,47:27,51:$Vc,55:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Vp,[2,17]),o($Vq,[2,7]),{19:[1,55]},o($Vn,[2,11]),{10:56,11:$Vr},o($Vp,[2,19]),o($Vp,[2,20]),{10:58,11:$Vr},{10:59,11:$Vr},{10:60,11:$Vr},{10:61,11:$Vr},o($Vp,[2,25]),{10:62,11:$Vr},{10:63,11:$Vr},{10:64,11:$Vr},{10:65,11:$Vr},{10:66,11:$Vr},{10:67,11:$Vr},{10:68,11:$Vr},{15:[1,69]},{15:[1,70]},{37:$Vs,48:$Vt,64:71},{11:[2,47],15:$Vu,19:$Vv,24:86,37:$Vw,40:74,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{37:[1,87]},{45:[1,88]},{37:[1,89]},{37:[1,90]},{37:[1,91]},{37:[1,92]},{11:[2,37]},{11:[2,36]},{37:[1,93]},{37:[1,94]},{37:[1,95]},{15:[2,60]},{15:[2,61]},{15:[2,62]},{15:[2,63]},{15:[2,64]},{15:[2,65]},{6:[1,96],12:49,13:$V0,15:$V2,20:50,21:11,22:12,23:$V4,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:$V5,39:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:$Vb,47:27,51:$Vc,55:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{1:[2,2]},{13:$Vo,15:$V2,20:97,21:11,22:12,23:$V4,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:$V5,39:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:$Vb,47:27,51:$Vc,55:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Vp,[2,16]),o($Vn,[2,3]),o($Vq,[2,6]),o($Vp,[2,15]),o($Vn,[2,10]),{10:98,11:$Vr},o($Vp,[2,18],{11:$VF}),o($VG,[2,9]),o($Vp,[2,21],{11:$VF}),o($Vp,[2,22],{11:$VF}),o($Vp,[2,23],{11:$VF}),o($Vp,[2,24],{11:$VF}),o($Vp,[2,26],{11:$VF}),o($Vp,[2,27],{11:$VF}),o($Vp,[2,28],{11:$VF}),o($Vp,[2,29],{11:$VF}),o($Vp,[2,30],{11:$VF}),o($Vp,[2,31],{11:$VF}),o($Vp,[2,32],{11:$VF}),{16:[1,100]},{11:[2,48],37:[1,103],48:[1,102],60:[1,101]},{15:$Vu,19:$Vv,24:86,37:$Vw,40:104,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,38:[1,105],40:107,56:106,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},o([15,19,37,67,71,87,88,89,90,91,92],[2,57]),{11:[2,46],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{15:$Vu,19:$Vv,24:86,37:$Vw,40:124,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:125,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:126,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},o($VX,[2,85]),o($VX,[2,86]),o($VX,[2,87]),o($VX,[2,88],{37:$Vs}),o($VX,[2,89]),o($VX,[2,90]),o($VX,[2,91]),o($VX,[2,92]),o($VX,[2,93]),{15:$Vu,19:$Vv,24:86,37:$Vw,40:127,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{11:[2,45]},{15:$Vu,19:$Vv,24:86,37:$Vw,40:107,56:128,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{47:129,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{15:[1,131],22:130},{15:$Vu,19:$Vv,24:86,37:$Vw,40:132,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:[1,133]},{15:$Vu,19:$Vv,24:86,37:$Vw,40:134,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{38:[1,135]},{1:[2,1]},o($Vp,[2,14]),o($Vn,[2,13],{11:$VF}),o($VG,[2,8]),{17:[1,136]},{15:[1,138],61:137},{15:$Vu,19:$Vv,24:86,37:$Vw,40:139,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{38:[1,140],47:143,62:141,63:142,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{10:144,11:$Vr,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},o($VX,[2,94]),{38:[1,145],60:$VY},o($VZ,[2,97],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW}),{15:$Vu,19:$Vv,24:86,37:$Vw,40:147,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:148,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:149,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:150,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:151,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:152,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:153,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:154,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:155,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:156,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:157,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:158,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:159,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:160,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:161,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:$Vu,19:$Vv,24:86,37:$Vw,40:162,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},o($V_,[2,66],{76:$VM}),{38:[1,163],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},o($V$,[2,84],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,86:$VW}),{38:[1,164],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{38:[1,165],60:$VY},{15:[1,166]},{49:[1,167]},{48:$Vt,64:71},{38:[1,168],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{38:[1,169]},{38:[1,170],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{11:[2,35]},{10:171,11:$Vr},{48:[1,172],60:[1,173]},o($V01,[2,59]),{11:[2,50],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{45:[1,174]},{38:[1,175],60:[1,176]},o($VZ,[2,54]),{15:[1,177]},o([6,13,15,23,36,39,41,42,43,44,46,49,51,55,57,58,59,65,66,67,68,69,70],[2,56],{11:$VF}),o($VX,[2,95]),{15:$Vu,19:$Vv,24:86,37:$Vw,40:178,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},o($V11,[2,67],{73:$VJ,74:$VK,75:$VL,76:$VM}),o($V11,[2,68],{73:$VJ,74:$VK,75:$VL,76:$VM}),o($V_,[2,69],{76:$VM}),o($V_,[2,70],{76:$VM}),o($V_,[2,71],{76:$VM}),o($V_,[2,72],{76:$VM}),o($V21,[2,74],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($V21,[2,75],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($V21,[2,76],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($V21,[2,77],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($V31,[2,78],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V31,[2,79],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V31,[2,80],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V$,[2,81],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,86:$VW}),o([11,38,49,60,85],[2,82],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,86:$VW}),o([11,38,49,60,84,85,86],[2,83],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT}),o($VX,[2,73]),{45:[1,179]},{10:180,11:$Vr},{48:[1,181]},{15:$Vu,19:$Vv,24:86,37:$Vw,40:182,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{45:[1,183]},{11:[2,33]},{11:[2,34]},o($Vq,[2,12],{11:$VF}),{15:$Vu,19:$Vv,24:86,37:$Vw,40:184,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{15:[1,185]},{11:[2,51]},{45:[1,186]},{47:143,63:187,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VZ,[2,55]),o($VZ,[2,96],{71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW}),{11:[2,44]},o($Vp,[2,43],{11:$VF}),{15:$Vu,19:$Vv,24:86,37:$Vw,40:188,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{49:[1,189],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{11:[2,38]},{11:[2,49],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},o($V01,[2,58]),{11:[2,52]},o($VZ,[2,53]),{49:[1,190],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{52:[1,191]},{15:$Vu,19:$Vv,24:86,37:$Vw,40:192,67:$Vx,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE},{38:[1,193]},{49:[1,194],71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW},{45:[1,195]},{50:196,53:[1,197],54:[1,198]},{11:[2,40]},{38:[1,199]},{38:[2,41]},{38:[2,42]},{45:[1,200]},{11:[2,39]}],
defaultActions: {36:[2,37],37:[2,36],41:[2,60],42:[2,61],43:[2,62],44:[2,63],45:[2,64],46:[2,65],48:[2,2],88:[2,45],96:[2,1],135:[2,35],169:[2,33],170:[2,34],174:[2,51],179:[2,44],183:[2,38],186:[2,52],195:[2,40],197:[2,41],198:[2,42],200:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const { NodoAST } = require('../arbol/NodoAST');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 11
break;
case 1:return 13
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 18
break;
case 6:return 14	
break;
case 7:return 65
break;
case 8:return 66
break;
case 9:return 67
break;
case 10:return 68
break;
case 11:return 69
break;
case 12:return 70
break;
case 13:return 89
break;
case 14:return 90
break;
case 15:return 59
break;
case 16:return 57
break;
case 17:return 58
break;
case 18:return 46
break;
case 19:return 44
break;
case 20:return 43
break;
case 21:return 42
break;
case 22:return 55
break;
case 23:return 36
break;
case 24:return 39
break;
case 25:return 41
break;
case 26:return 17
break;
case 27:return 53
break;
case 28:return 72
break;
case 29:return 54	
break;
case 30:return 71
break;
case 31:return 73
break;
case 32:return 74
break;
case 33:return 75
break;
case 34:return 76
break;
case 35:return 80
break;
case 36:return 79
break;
case 37:return 78
break;
case 38:return 77
break;
case 39:return 81
break;
case 40:return 48
break;
case 41:return 82
break;
case 42:return 87
break;
case 43:return 83
break;
case 44:return 84
break;
case 45:return 85
break;
case 46:return 86
break;
case 47:return 37
break;
case 48:return 38
break;
case 49:return 45
break;
case 50:return 60
break;
case 51:return 49
break;
case 52:return 16
break;
case 53: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 91; 
break;
case 54:return 92
break;
case 55:return 15
break;
case 56:return 19
break;
case 57:return 88
break;
case 58:return 6
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\n)/,/^(?:\t)/,/^(?:\s+)/,/^(?:!!.*)/,/^(?:[‘][’][^’]*[’]+([^‘][^‘]*[‘]+)*[’][’])/,/^(?:Incerteza\b)/,/^(?:Importar\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:crl\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:(()?[a-zA-Z]+(|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}