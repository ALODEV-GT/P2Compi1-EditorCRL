/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,28],$V3=[1,30],$V4=[1,11],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,38],$Va=[1,37],$Vb=[1,36],$Vc=[1,35],$Vd=[1,34],$Ve=[1,32],$Vf=[1,33],$Vg=[1,31],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,55],$Vn=[14,16,37,42,43,45,46,47,48,49,56,58,59,60,66,67,68,69,70],$Vo=[1,59],$Vp=[6,14,16,37,42,43,45,46,47,48,49,56,58,59,60,66,67,68,69,70],$Vq=[6,12,14,15,16,19,37,42,43,45,46,47,48,49,56,58,59,60,66,67,68,69,70],$Vr=[14,15,16,19,37,42,43,45,46,47,48,49,56,58,59,60,66,67,68,69,70],$Vs=[1,80],$Vt=[1,81],$Vu=[1,88],$Vv=[1,87],$Vw=[1,86],$Vx=[1,84],$Vy=[1,83],$Vz=[1,85],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[2,71],$VF=[1,118],$VG=[1,117],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,122],$VL=[1,123],$VM=[1,124],$VN=[1,125],$VO=[1,126],$VP=[1,127],$VQ=[1,128],$VR=[1,129],$VS=[1,130],$VT=[1,131],$VU=[1,132],$VV=[12,40,52,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VW=[1,140],$VX=[1,156],$VY=[40,61],$VZ=[12,40,52,61,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86],$V_=[12,40,52,61,84,85],$V$=[51,61],$V01=[12,40,52,61,71,72,77,78,79,80,81,82,83,84,85,86],$V11=[12,40,52,61,77,78,79,80,81,82,83,84,85,86],$V21=[12,40,52,61,81,82,83,84,85,86],$V31=[1,203],$V41=[1,204];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"ENCABEZADO":4,"INSTRUCCIONES":5,"EOF":6,"SALTOS":7,"INSTRUCCION":8,"IMPORTACIONES":9,"INCERTEZA":10,"IMPORTAR":11,"salto_linea":12,"TABS":13,"tab":14,"importar":15,"id":16,"punto":17,"crl":18,"incerteza":19,"decimal":20,"entero":21,"DECLARACIONES":22,"ASIGNACION":23,"LLAMADA_FUNCION":24,"RETORNO":25,"SI":26,"SINO":27,"MOSTRAR":28,"PARA":29,"MIENTRAS":30,"DETENER":31,"CONTINUAR":32,"FUNCION_PRINCIPAL":33,"DIBUJAR_AST":34,"DIBUJAR_EXP":35,"DIBUJAR_TS":36,"void":37,"principal":38,"par_a":39,"par_c":40,"dos_p":41,"dib_ast":42,"dib_exp":43,"EXP":44,"dib_ts":45,"continuar":46,"detener":47,"mientras":48,"para":49,"TIPO_VARIABLE_NATIVA":50,"asig":51,"pyc":52,"OP":53,"inc":54,"dec":55,"mostrar":56,"LISTA_EXPRESIONES":57,"si":58,"sino":59,"retorno":60,"coma":61,"IDS":62,"LISTA_PARAMETROS":63,"PARAMETRO":64,"TIPO_IGUAL":65,"double":66,"boolean":67,"string":68,"int":69,"char":70,"menos":71,"mas":72,"por":73,"div":74,"mod":75,"pot":76,"mayor":77,"menor":78,"mayor_igual":79,"menor_igual":80,"igual":81,"dif":82,"sig_inc":83,"and":84,"or":85,"xor":86,"not":87,"true":88,"false":89,"cadena":90,"char_exp":91,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",12:"salto_linea",14:"tab",15:"importar",16:"id",17:"punto",18:"crl",19:"incerteza",20:"decimal",21:"entero",37:"void",38:"principal",39:"par_a",40:"par_c",41:"dos_p",42:"dib_ast",43:"dib_exp",45:"dib_ts",46:"continuar",47:"detener",48:"mientras",49:"para",51:"asig",52:"pyc",54:"inc",55:"dec",56:"mostrar",58:"si",59:"sino",60:"retorno",61:"coma",66:"double",67:"boolean",68:"string",69:"int",70:"char",71:"menos",72:"mas",73:"por",74:"div",75:"mod",76:"pot",77:"mayor",78:"menor",79:"mayor_igual",80:"menor_igual",81:"igual",82:"dif",83:"sig_inc",84:"and",85:"or",86:"xor",87:"not",88:"true",89:"false",90:"cadena",91:"char_exp"},
productions_: [0,[3,3],[3,2],[3,3],[4,2],[4,3],[4,1],[4,2],[4,1],[4,2],[9,2],[9,1],[7,2],[7,1],[13,2],[13,1],[11,5],[10,3],[10,3],[5,3],[5,2],[5,2],[5,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[33,5],[34,4],[35,4],[36,3],[32,1],[31,1],[30,5],[29,12],[29,9],[53,1],[53,1],[28,4],[26,5],[27,2],[25,2],[25,1],[22,2],[22,6],[22,4],[22,5],[22,6],[63,3],[63,1],[64,2],[23,3],[65,1],[62,3],[62,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[24,3],[24,4],[57,3],[57,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2: case 3:
Parser.yy.Agrup.ordenar(Parser.yy.LisIn.raiz); var r = Parser.yy.Agrup.agruparArbol(Parser.yy.LisIn.raiz, yylineno); Parser.yy.LisIn.limpiar(); return r; 
break;
case 14: case 15:
contadorTabs++;
break;
case 17: case 18:
let incertz = new Parser.yy.Nodo("INSTRUCCION","", yylineno); 
									let decIncertz = new Parser.yy.Nodo("DECLARACION_VAR","",yylineno);
									let tipoVar = new Parser.yy.Nodo("TIPO_VARIABLE_NATIVA","",yylineno);
									tipoVar.agregarHijo(new Parser.yy.Nodo("Double","double",yylineno));
									decIncertz.agregarHijo(tipoVar);
									decIncertz.agregarHijo(new Parser.yy.Nodo("incerteza","id",yylineno));
									decIncertz.agregarHijo(new Parser.yy.Nodo("=","asig",yylineno)); 
									let expresion = new Parser.yy.Nodo("EXP","",yylineno);
									expresion.agregarHijo(new Parser.yy.Nodo($$[$0-1],"DECIMAL",yylineno));
									decIncertz.agregarHijo(expresion);
									incertz.agregarHijo(decIncertz); Parser.yy.LisIn.agregarNodo(incertz,0); 
									contadorTabs=0;
break;
case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37:
this.$ = new Parser.yy.Nodo("INSTRUCCION","", yylineno); this.$.agregarHijo($$[$0-1]); Parser.yy.LisIn.agregarNodo(this.$,contadorTabs); contadorTabs=0;
break;
case 38:
this.$ = new Parser.yy.Nodo("FUNCION_PRINCIPAL","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-4],"void",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"principal",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"par_a",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_c",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p", yylineno));
break;
case 39:
this.$ = new Parser.yy.Nodo("DIBUJAR_AST","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"dib_ast",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"par_a",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"par_c", yylineno));
break;
case 40:
this.$ = new Parser.yy.Nodo("DIBUJAR_EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"dib_exp",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"par_a",yylineno)); this.$.agregarHijo($$[$0-1]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"par_c",yylineno));
break;
case 41:
this.$ = new Parser.yy.Nodo("DIBUJAR_TS","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"dib_ts",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_a",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"par_c",yylineno));
break;
case 42:
this.$ = new Parser.yy.Nodo("CONTINUAR","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"continuar",yylineno));
break;
case 43:
this.$ = new Parser.yy.Nodo("DETENER","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"detener",yylineno));
break;
case 44:
this.$ = new Parser.yy.Nodo("MIENTRAS","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-4],"mientras",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"par_a",yylineno)); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_c",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p",yylineno));
break;
case 45:
this.$ = new Parser.yy.Nodo("PARA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-11],"para",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-10],"par_a",yylineno)); this.$.agregarHijo($$[$0-9]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-8],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-7],"asig",yylineno)); this.$.agregarHijo($$[$0-6]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-5],"pyc",yylineno)); this.$.agregarHijo($$[$0-4]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"pyc",yylineno)); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_c",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p",yylineno));
break;
case 46:
this.$ = new Parser.yy.Nodo("PARA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-8],"para",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-7],"par_a",yylineno)); this.$.agregarHijo($$[$0-6]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-5],"pyc",yylineno)); this.$.agregarHijo($$[$0-4]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"pyc",yylineno)); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_c",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p",yylineno));
break;
case 47:
this.$ = new Parser.yy.Nodo("OP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"inc",yylineno));
break;
case 48:
this.$ = new Parser.yy.Nodo("OP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dec",yylineno));
break;
case 49:
this.$ = new Parser.yy.Nodo("MOSTRAR","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"mostrar",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"par_a",yylineno)); this.$.agregarHijo($$[$0-1]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"par_c",yylineno));
break;
case 50:
this.$ = new Parser.yy.Nodo("INSTRUCCION_SI","",yylineno); let si = new Parser.yy.Nodo("SI","",yylineno); si.agregarHijo(new Parser.yy.Nodo($$[$0-4],"si",yylineno)); si.agregarHijo(new Parser.yy.Nodo($$[$0-3],"par_a",yylineno)); si.agregarHijo($$[$0-2]); si.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_c",yylineno)); si.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p",yylineno)); this.$.agregarHijo(si);
break;
case 51:
this.$ = new Parser.yy.Nodo("SINO","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"sino",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p",yylineno));
break;
case 52:
this.$ = new Parser.yy.Nodo("RETORNO","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"retorno",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 53:
this.$ = new Parser.yy.Nodo("RETORNO","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"retorno",yylineno));
break;
case 54:
this.$ = new Parser.yy.Nodo("DECLARACION_VAR","",yylineno); this.$.agregarHijo($$[$0-1]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"id",yylineno)); 
break;
case 55:
this.$ = new Parser.yy.Nodo("DECLARACION_VAR","",yylineno); this.$.agregarHijo($$[$0-5]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-4],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"coma",yylineno));  this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"asig",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 56:
this.$ = new Parser.yy.Nodo("DECLARACION_VAR","",yylineno); this.$.agregarHijo($$[$0-3]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"asig",yylineno));  this.$.agregarHijo($$[$0]);
break;
case 57:
this.$ = new Parser.yy.Nodo("DECLARACION_FUN","",yylineno); this.$.agregarHijo($$[$0-4]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"par_a",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_c",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p",yylineno));
break;
case 58:
this.$ = new Parser.yy.Nodo("DECLARACION_FUN","",yylineno); this.$.agregarHijo($$[$0-5]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-4],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"par_a",yylineno)); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_c",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"dos_p",yylineno));
break;
case 59:
this.$ = new Parser.yy.Nodo("LISTA_PARAMETROS","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"coma",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 60:
this.$ = new Parser.yy.Nodo("LISTA_PARAMETROS","",yylineno); this.$.agregarHijo($$[$0]);
break;
case 61:
this.$ = new Parser.yy.Nodo("PARAMETRO","",yylineno); this.$.agregarHijo($$[$0-1]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"id",yylineno));
break;
case 62:
this.$ = new Parser.yy.Nodo("ASIGNACION","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"id",yylineno)); this.$.agregarHijo($$[$0-1]); this.$.agregarHijo($$[$0]);
break;
case 63:
this.$ = new Parser.yy.Nodo("TIPO_IGUAL","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"asig",yylineno));
break;
case 64:
this.$ = new Parser.yy.Nodo("IDS","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"coma",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"id",yylineno));
break;
case 65:
this.$ = new Parser.yy.Nodo("IDS","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"id",yylineno));
break;
case 66:
this.$ = new Parser.yy.Nodo("TIPO_VARIABLE_NATIVA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"double",yylineno));
break;
case 67:
this.$ = new Parser.yy.Nodo("TIPO_VARIABLE_NATIVA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"boolean",yylineno));
break;
case 68:
this.$ = new Parser.yy.Nodo("TIPO_VARIABLE_NATIVA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"string",yylineno));
break;
case 69:
this.$ = new Parser.yy.Nodo("TIPO_VARIABLE_NATIVA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"int",yylineno));
break;
case 70:
this.$ = new Parser.yy.Nodo("TIPO_VARIABLE_NATIVA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"char",yylineno));
break;
case 71:
this.$ = new Parser.yy.Nodo("TIPO_VARIABLE_NATIVA","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"void",yylineno));
break;
case 72:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo("-","resta",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 73:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("+","suma",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 74:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("-","resta",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 75:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("*","producto",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 76:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("/","division",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 77:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("%","mod",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 78:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("^","potencia",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 79:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-1]);
break;
case 80:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo(">","mayor",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 81:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("<","menor",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 82:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo(">=","mayor_igual",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 83:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("<=","menor_igual",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 84:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("==","igual",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 85:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("!=","dif",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 86:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("~","sig_inc",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 87:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("&&","and",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 88:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("||","or",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 89:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo("|&","xor",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 90:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo("!","not")); this.$.agregarHijo($$[$0]);
break;
case 91:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"ENTERO",yylineno));
break;
case 92:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"DECIMAL",yylineno));
break;
case 93:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"id",yylineno));
break;
case 94: case 95:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"BOOLEAN",yylineno));
break;
case 96:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"CADENA",yylineno));
break;
case 97:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"CHAR",yylineno));
break;
case 98:
this.$ = new Parser.yy.Nodo("EXP","",yylineno); this.$.agregarHijo($$[$0]);
break;
case 99:
this.$ = new Parser.yy.Nodo("LLAMADA_FUNCION","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"par_a",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"par_c",yylineno));
break;
case 100:
this.$ = new Parser.yy.Nodo("LLAMADA_FUNCION","",yylineno); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-3],"id",yylineno)); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-2],"par_a",yylineno)); this.$.agregarHijo($$[$0-1]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0],"par_c",yylineno));
break;
case 101:
this.$ = new Parser.yy.Nodo("LISTA_EXPRESIONES","",yylineno); this.$.agregarHijo($$[$0-2]); this.$.agregarHijo(new Parser.yy.Nodo($$[$0-1],"coma",yylineno)); this.$.agregarHijo($$[$0]);
break;
case 102:
this.$ = new Parser.yy.Nodo("LISTA_EXPRESIONES","",yylineno); this.$.agregarHijo($$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:8,9:5,10:6,11:10,12:$V0,13:7,14:$V1,15:$V2,16:$V3,19:$V4,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:$V5,42:$V6,43:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:29,56:$Vd,58:$Ve,59:$Vf,60:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},{1:[3]},{5:48,8:8,13:7,14:$V1,16:$V3,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:$V5,42:$V6,43:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:29,56:$Vd,58:$Ve,59:$Vf,60:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},{6:[1,49],8:51,13:50,14:$V1,16:$V3,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:$V5,42:$V6,43:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:29,56:$Vd,58:$Ve,59:$Vf,60:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},{8:52,9:53,10:54,11:10,12:$Vm,15:$V2,16:$V3,19:$V4,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:$V5,42:$V6,43:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:29,56:$Vd,58:$Ve,59:$Vf,60:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},o($Vn,[2,6],{10:56,11:57,15:$V2,19:$V4}),o($Vn,[2,8]),{8:58,14:$Vo,16:$V3,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:$V5,42:$V6,43:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:29,56:$Vd,58:$Ve,59:$Vf,60:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},o($Vp,[2,22]),o($Vq,[2,13]),o($Vr,[2,11]),{20:[1,60],21:[1,61]},o($Vn,[2,15]),{7:62,12:$V0},{7:63,12:$V0},{7:64,12:$V0},{7:65,12:$V0},{7:66,12:$V0},{7:67,12:$V0},{7:68,12:$V0},{7:69,12:$V0},{7:70,12:$V0},{7:71,12:$V0},{7:72,12:$V0},{7:73,12:$V0},{7:74,12:$V0},{7:75,12:$V0},{7:76,12:$V0},{16:[1,77]},{16:[1,78]},{39:$Vs,51:$Vt,65:79},{12:[2,53],16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:82,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{39:[1,94]},{41:[1,95]},{39:[1,96]},{39:[1,97]},{39:[1,98]},{12:[2,43]},{12:[2,42]},{16:$VE,38:[1,99]},{39:[1,100]},{39:[1,101]},{39:[1,102]},{16:[2,66]},{16:[2,67]},{16:[2,68]},{16:[2,69]},{16:[2,70]},{6:[1,103],8:51,13:50,14:$V1,16:$V3,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:$V5,42:$V6,43:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:29,56:$Vd,58:$Ve,59:$Vf,60:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},{1:[2,2]},{8:104,14:$Vo,16:$V3,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:$V5,42:$V6,43:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:29,56:$Vd,58:$Ve,59:$Vf,60:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},o($Vp,[2,21]),{6:[1,105]},o($Vn,[2,7],{11:57,10:106,15:$V2,19:$V4}),o($Vn,[2,9]),o($Vq,[2,12]),o($Vn,[2,4]),o($Vr,[2,10]),o($Vp,[2,20]),o($Vn,[2,14]),{7:107,12:$V0},{7:108,12:$V0},o($Vp,[2,23],{12:$Vm}),o($Vp,[2,24],{12:$Vm}),o($Vp,[2,25],{12:$Vm}),o($Vp,[2,26],{12:$Vm}),o($Vp,[2,27],{12:$Vm}),o($Vp,[2,28],{12:$Vm}),o($Vp,[2,29],{12:$Vm}),o($Vp,[2,30],{12:$Vm}),o($Vp,[2,31],{12:$Vm}),o($Vp,[2,32],{12:$Vm}),o($Vp,[2,33],{12:$Vm}),o($Vp,[2,34],{12:$Vm}),o($Vp,[2,35],{12:$Vm}),o($Vp,[2,36],{12:$Vm}),o($Vp,[2,37],{12:$Vm}),{17:[1,109]},{12:[2,54],39:[1,112],51:[1,111],61:[1,110]},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:113,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,40:[1,114],44:116,57:115,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o([16,20,21,39,71,87,88,89,90,91],[2,63]),{12:[2,52],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:133,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:134,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:135,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($VV,[2,91]),o($VV,[2,92]),o($VV,[2,93],{39:$Vs}),o($VV,[2,94]),o($VV,[2,95]),o($VV,[2,96]),o($VV,[2,97]),o($VV,[2,98]),{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:136,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{12:[2,51]},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:116,57:137,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:[1,141],23:139,37:$VW,50:138,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:142,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{39:[1,143]},{16:[1,144]},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:145,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{40:[1,146]},{1:[2,1]},o($Vp,[2,19]),{1:[2,3]},o($Vn,[2,5]),o($Vn,[2,17],{12:$Vm}),o($Vn,[2,18],{12:$Vm}),{18:[1,147]},{16:[1,149],62:148},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:150,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{37:$VW,40:[1,151],50:154,63:152,64:153,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},o([12,52],[2,62],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU}),o($VV,[2,99]),{40:[1,155],61:$VX},o($VY,[2,102],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU}),{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:157,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:158,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:159,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:160,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:161,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:162,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:163,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:164,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:165,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:166,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:167,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:168,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:169,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:170,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:171,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:172,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($VZ,[2,72],{76:$VK}),{40:[1,173],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},o($V_,[2,90],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,86:$VU}),{40:[1,174],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{40:[1,175],61:$VX},{16:[1,176]},{52:[1,177]},{16:$VE},{51:$Vt,65:79},{40:[1,178],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{40:[1,179]},{40:[1,180]},{40:[1,181],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{12:[2,41]},{7:182,12:$V0},{51:[1,183],61:[1,184]},o($V$,[2,65]),{12:[2,56],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{41:[1,185]},{40:[1,186],61:[1,187]},o($VY,[2,60]),{16:[1,188]},o($VV,[2,100]),{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:189,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($V01,[2,73],{73:$VH,74:$VI,75:$VJ,76:$VK}),o($V01,[2,74],{73:$VH,74:$VI,75:$VJ,76:$VK}),o($VZ,[2,75],{76:$VK}),o($VZ,[2,76],{76:$VK}),o($VZ,[2,77],{76:$VK}),o($VZ,[2,78],{76:$VK}),o($V11,[2,80],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o($V11,[2,81],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o($V11,[2,82],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o($V11,[2,83],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o($V21,[2,84],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO}),o($V21,[2,85],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO}),o($V21,[2,86],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO}),o($V_,[2,87],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,86:$VU}),o([12,40,52,61,85],[2,88],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,86:$VU}),o([12,40,52,61,84,85,86],[2,89],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),o($VV,[2,79]),{41:[1,190]},{12:[2,49]},{51:[1,191]},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:192,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{41:[1,193]},{41:[1,194]},{12:[2,39]},{12:[2,40]},o($Vr,[2,16],{12:$Vm}),{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:195,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{16:[1,196]},{12:[2,57]},{41:[1,197]},{37:$VW,50:154,64:198,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:$Vl},o($VY,[2,61]),o($VY,[2,101],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU}),{12:[2,50]},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:199,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{52:[1,200],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{12:[2,44]},{12:[2,38]},{12:[2,55],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},o($V$,[2,64]),{12:[2,58]},o($VY,[2,59]),{52:[1,201],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{53:202,54:$V31,55:$V41},{16:$Vu,20:$Vv,21:$Vw,24:93,39:$Vx,44:205,71:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{40:[1,206]},{40:[2,47]},{40:[2,48]},{52:[1,207],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU},{41:[1,208]},{53:209,54:$V31,55:$V41},{12:[2,46]},{40:[1,210]},{41:[1,211]},{12:[2,45]}],
defaultActions: {37:[2,43],38:[2,42],43:[2,66],44:[2,67],45:[2,68],46:[2,69],47:[2,70],49:[2,2],95:[2,51],103:[2,1],105:[2,3],140:[2,71],146:[2,41],175:[2,49],180:[2,39],181:[2,40],185:[2,57],190:[2,50],193:[2,44],194:[2,38],197:[2,58],203:[2,47],204:[2,48],208:[2,46],211:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	let contadorTabs = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 12
break;
case 1:return 14
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 19
break;
case 6:return 15	
break;
case 7:return 66
break;
case 8:return 67
break;
case 9:return 68
break;
case 10:return 69
break;
case 11:return 70
break;
case 12:return 37
break;
case 13:return 88
break;
case 14:return 89
break;
case 15:return 60
break;
case 16:return 58
break;
case 17:return 59
break;
case 18:return 49
break;
case 19:return 48
break;
case 20:return 47
break;
case 21:return 46
break;
case 22:return 56
break;
case 23:return 42
break;
case 24:return 43
break;
case 25:return 45
break;
case 26:return 38
break;
case 27:return 18
break;
case 28:return 54
break;
case 29:return 72
break;
case 30:return 55	
break;
case 31:return 71
break;
case 32:return 73
break;
case 33:return 74
break;
case 34:return 75
break;
case 35:return 76
break;
case 36:return 80
break;
case 37:return 79
break;
case 38:return 78
break;
case 39:return 77
break;
case 40:return 81
break;
case 41:return 51
break;
case 42:return 82
break;
case 43:return 87
break;
case 44:return 83
break;
case 45:return 84
break;
case 46:return 85
break;
case 47:return 86
break;
case 48:return 39
break;
case 49:return 40
break;
case 50:return 41
break;
case 51:return 61
break;
case 52:return 52
break;
case 53:return 17
break;
case 54: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 90; 
break;
case 55:return 91
break;
case 56:return 16
break;
case 57:return 20
break;
case 58:return 21
break;
case 59:return 6
break;
case 60: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\n)/,/^(?:\t)/,/^(?:\s+)/,/^(?:!!.*)/,/^(?:[']['][^']*[']+([^'][^']*[']+)*[']['])/,/^(?:Incerteza\b)/,/^(?:Importar\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:Principal\b)/,/^(?:crl\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:(()?[a-zA-Z]+(|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}